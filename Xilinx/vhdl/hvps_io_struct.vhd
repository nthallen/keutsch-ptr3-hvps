-- VHDL Entity PTR3_HVPS_lib.HVPS_IO.symbol
--
-- Created:
--          by - nort.Domain Users (NORT-XPS14)
--          at - 13:06:16 11/29/16
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2013.1b (Build 2)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY HVPS_IO IS
   GENERIC( 
      N_INTERRUPTS : integer range 15 downto 0 := 0;
      N_BOARDS     : integer range 15 downto 0 := 1;
      ADDR_WIDTH   : integer                   := 8
   );
   PORT( 
      clk              : IN     std_ulogic;
      subbus_addr      : IN     std_logic_vector (ADDR_WIDTH-1 DOWNTO 0);
      subbus_ctrl      : IN     std_logic_vector (6 DOWNTO 0);
      subbus_data_o    : IN     std_logic_vector (15 DOWNTO 0);
      subbus_fail_in   : IN     std_ulogic;
      Flt_CPU_Reset    : OUT    std_ulogic;
      subbus_collision : OUT    std_ulogic;
      subbus_data_i    : OUT    std_logic_vector (15 DOWNTO 0);
      subbus_fail_out  : OUT    std_ulogic;
      subbus_status    : OUT    std_logic_vector (3 DOWNTO 0);
      hvps_scl         : INOUT  std_logic;
      hvps_sda         : INOUT  std_logic
   );

-- Declarations

END HVPS_IO ;

--
-- VHDL Architecture PTR3_HVPS_lib.HVPS_IO.struct
--
-- Created:
--          by - nort.Domain Users (NORT-XPS14)
--          at - 13:06:16 11/29/16
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2013.1b (Build 2)
--

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

-- LIBRARY PTR3_HVPS_lib;

ARCHITECTURE struct OF HVPS_IO IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL BdIntr   : std_ulogic_vector(N_INTERRUPTS-1 DOWNTO 0);
   SIGNAL ExpAck   : std_logic_vector(N_BOARDS-1 DOWNTO 0);
   SIGNAL ExpAddr  : std_logic_vector(ADDR_WIDTH-1 DOWNTO 0);
   SIGNAL ExpRd    : std_logic;
   SIGNAL ExpReset : std_ulogic;
   SIGNAL ExpWr    : std_logic;
   SIGNAL WData    : std_logic_vector(15 DOWNTO 0);
   SIGNAL rData    : std_logic_vector(15 DOWNTO 0);


   -- Component Declarations
   COMPONENT HVPS
   GENERIC (
      N_CHANNELS : integer                       := 14;
      BASE_ADDR  : std_logic_vector(15 DOWNTO 0) := X"0030";
      ADDR_WIDTH : integer                       := 16
   );
   PORT (
      ExpAddr : IN     std_logic_vector (ADDR_WIDTH-1 DOWNTO 0);
      ExpRd   : IN     std_ulogic ;
      ExpWr   : IN     std_ulogic ;
      clk     : IN     std_ulogic ;
      rst     : IN     std_ulogic ;
      wData   : IN     std_logic_vector (15 DOWNTO 0);
      ExpAck  : OUT    std_ulogic ;
      rData   : OUT    std_logic_vector (15 DOWNTO 0);
      scl     : INOUT  std_logic ;
      sda     : INOUT  std_logic 
   );
   END COMPONENT;
   COMPONENT syscon
   GENERIC (
      DACS_BUILD_NUMBER : std_logic_vector(15 DOWNTO 0) := X"0007";
      INSTRUMENT_ID     : std_logic_vector(15 DOWNTO 0) := X"0001";
      N_INTERRUPTS      : integer range 15 downto 0     := 1;
      N_BOARDS          : integer range 15 downto 0     := 1;
      ADDR_WIDTH        : integer range 16 downto 8     := 16;
      INTA_ADDR         : std_logic_vector(15 DOWNTO 0) := X"0040";
      BDID_ADDR         : std_logic_vector(15 DOWNTO 0) := X"0080"
   );
   PORT (
      Addr          : IN     std_logic_vector (ADDR_WIDTH-1 DOWNTO 0);
      BdIntr        : IN     std_ulogic_vector (N_INTERRUPTS-1 DOWNTO 0);
      Ctrl          : IN     std_logic_vector (6 DOWNTO 0);
      Data_o        : IN     std_logic_vector (15 DOWNTO 0);
      ExpAck        : IN     std_logic_vector (N_BOARDS-1 DOWNTO 0);
      F8M           : IN     std_logic;
      Fail_In       : IN     std_ulogic;
      RData         : IN     std_logic_vector (16*N_BOARDS-1 DOWNTO 0);
      CmdEnbl       : OUT    std_ulogic;
      CmdStrb       : OUT    std_ulogic;
      Collision     : OUT    std_ulogic;
      Data_i        : OUT    std_logic_vector (15 DOWNTO 0);
      ExpAddr       : OUT    std_logic_vector (ADDR_WIDTH-1 DOWNTO 0);
      ExpRd         : OUT    std_logic;
      ExpReset      : OUT    std_ulogic;
      ExpWr         : OUT    std_logic;
      Fail_Out      : OUT    std_ulogic;
      Flt_CPU_Reset : OUT    std_ulogic;
      INTA          : OUT    std_ulogic;
      Status        : OUT    std_logic_vector (3 DOWNTO 0);
      WData         : OUT    std_logic_vector (15 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
-- FOR ALL : HVPS USE ENTITY PTR3_HVPS_lib.HVPS;
-- FOR ALL : syscon USE ENTITY PTR3_HVPS_lib.syscon;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_0 : HVPS
      GENERIC MAP (
         N_CHANNELS => 14,
         BASE_ADDR  => X"0050",
         ADDR_WIDTH => ADDR_WIDTH
      )
      PORT MAP (
         ExpAddr => ExpAddr,
         ExpRd   => ExpRd,
         ExpWr   => ExpWr,
         clk     => clk,
         rst     => ExpReset,
         wData   => WData,
         ExpAck  => ExpAck(0),
         rData   => rData,
         scl     => hvps_scl,
         sda     => hvps_sda
      );
   U_1 : syscon
      GENERIC MAP (
         DACS_BUILD_NUMBER => X"0044",
         INSTRUMENT_ID     => X"0008",
         N_INTERRUPTS      => N_INTERRUPTS,
         N_BOARDS          => N_BOARDS,
         ADDR_WIDTH        => ADDR_WIDTH,
         INTA_ADDR         => X"0004",
         BDID_ADDR         => X"0002"
      )
      PORT MAP (
         F8M           => clk,
         Ctrl          => subbus_ctrl,
         Addr          => subbus_addr,
         Data_i        => subbus_data_i,
         Data_o        => subbus_data_o,
         Status        => subbus_status,
         ExpRd         => ExpRd,
         ExpWr         => ExpWr,
         WData         => WData,
         RData         => rData,
         ExpAddr       => ExpAddr,
         ExpAck        => ExpAck,
         BdIntr        => BdIntr,
         Collision     => subbus_collision,
         INTA          => OPEN,
         CmdEnbl       => OPEN,
         CmdStrb       => OPEN,
         ExpReset      => ExpReset,
         Fail_In       => subbus_fail_in,
         Fail_Out      => subbus_fail_out,
         Flt_CPU_Reset => Flt_CPU_Reset
      );

END struct;
