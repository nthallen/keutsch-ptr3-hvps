-- VHDL Entity PTR3_HVPS_lib.HVPS_IO.symbol
--
-- Created:
--          by - nort.UNKNOWN (NORT-XPS14)
--          at - 14:00:30 11/28/2017
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2016.1 (Build 8)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;
LIBRARY PTR3_HVPS_lib;
USE PTR3_HVPS_lib.HVPS_cfg.all;

ENTITY HVPS_IO IS
  GENERIC( 
    N_INTERRUPTS : integer range 15 downto 0 := 0;
    N_BOARDS     : integer range 15 downto 0 := 1;
    ADDR_WIDTH   : integer                   := 8;
    N_CHANNELS   : integer                   := 14;
    ChanCfgs     : Cfg_t                     := ( "000000000", "000000010", "001000100", "010000111", "011001000", "011001011", "100010001", "011011000", "011011011", "100100001", "011101000", "011101011", "100110001", "100111001" )
  );
  PORT( 
    clk              : IN     std_logic;
    subbus_addr      : IN     std_logic_vector (ADDR_WIDTH-1 DOWNTO 0);
    subbus_ctrl      : IN     std_logic_vector (6 DOWNTO 0);
    subbus_data_o    : IN     std_logic_vector (15 DOWNTO 0);
    subbus_fail_in   : IN     std_logic;
    Flt_CPU_Reset    : OUT    std_logic;
    subbus_collision : OUT    std_logic;
    subbus_data_i    : OUT    std_logic_vector (15 DOWNTO 0);
    subbus_fail_out  : OUT    std_logic;
    subbus_status    : OUT    std_logic_vector (3 DOWNTO 0);
    hvps_scl         : INOUT  std_logic;
    hvps_sda         : INOUT  std_logic
  );

-- Declarations

END ENTITY HVPS_IO ;

--
-- VHDL Architecture PTR3_HVPS_lib.HVPS_IO.struct
--
-- Created:
--          by - nort.UNKNOWN (NORT-XPS14)
--          at - 14:31:22 11/28/2017
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2016.1 (Build 8)
--

-- Generation properties:
--   Component declarations : yes
--   Configurations         : embedded statements
--                          : add pragmas
--                          : exclude view name
--   
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;
LIBRARY PTR3_HVPS_lib;
USE PTR3_HVPS_lib.HVPS_cfg.all;


ARCHITECTURE struct OF HVPS_IO IS

  -- Architecture declarations

  -- Internal signal declarations
  SIGNAL BdIntr   : std_logic_vector(N_INTERRUPTS-1 DOWNTO 0);
  SIGNAL ExpAck   : std_logic_vector(N_BOARDS-1 DOWNTO 0);
  SIGNAL ExpAddr  : std_logic_vector(ADDR_WIDTH-1 DOWNTO 0);
  SIGNAL ExpRd    : std_logic;
  SIGNAL ExpReset : std_logic;
  SIGNAL ExpWr    : std_logic;
  SIGNAL WData    : std_logic_vector(15 DOWNTO 0);
  SIGNAL rData    : std_logic_vector(15 DOWNTO 0);


  -- Component Declarations
  COMPONENT HVPS
  GENERIC (
    N_CHANNELS : integer                       := 14;
    BASE_ADDR  : std_logic_vector(15 DOWNTO 0) := X"0030";
    ADDR_WIDTH : integer                       := 16;
    ChanCfgs   : Cfg_t                         := ( "000000000", "000000010", "001000100", "010000111", "011001000", "011001011", "100010001", "011011000", "011011011", "100100001", "011101000", "011101011", "100110001", "100111001" )
  );
  PORT (
    ExpAddr : IN     std_logic_vector (ADDR_WIDTH-1 DOWNTO 0);
    ExpRd   : IN     std_logic ;
    ExpWr   : IN     std_logic ;
    clk     : IN     std_logic ;
    rst     : IN     std_logic ;
    wData   : IN     std_logic_vector (15 DOWNTO 0);
    ExpAck  : OUT    std_logic ;
    rData   : OUT    std_logic_vector (15 DOWNTO 0);
    scl     : INOUT  std_logic ;
    sda     : INOUT  std_logic 
  );
  END COMPONENT HVPS;
  COMPONENT syscon
  GENERIC (
    DACS_BUILD_NUMBER : std_logic_vector(15 DOWNTO 0) := X"0007";
    INSTRUMENT_ID     : std_logic_vector(15 DOWNTO 0) := X"0001";
    N_INTERRUPTS      : integer range 15 downto 0     := 1;
    N_BOARDS          : integer range 15 downto 0     := 1;
    ADDR_WIDTH        : integer range 16 downto 8     := 16;
    INTA_ADDR         : std_logic_vector(15 DOWNTO 0) := X"0040";
    BDID_ADDR         : std_logic_vector(15 DOWNTO 0) := X"0080"
  );
  PORT (
    Addr          : IN     std_logic_vector (ADDR_WIDTH-1 DOWNTO 0);
    BdIntr        : IN     std_logic_vector (N_INTERRUPTS-1 DOWNTO 0);
    Ctrl          : IN     std_logic_vector (6 DOWNTO 0);
    Data_o        : IN     std_logic_vector (15 DOWNTO 0);
    ExpAck        : IN     std_logic_vector (N_BOARDS-1 DOWNTO 0);
    F8M           : IN     std_logic;
    Fail_In       : IN     std_logic;
    RData         : IN     std_logic_vector (16*N_BOARDS-1 DOWNTO 0);
    CmdEnbl       : OUT    std_logic;
    CmdStrb       : OUT    std_logic;
    Collision     : OUT    std_logic;
    Data_i        : OUT    std_logic_vector (15 DOWNTO 0);
    ExpAddr       : OUT    std_logic_vector (ADDR_WIDTH-1 DOWNTO 0);
    ExpRd         : OUT    std_logic;
    ExpReset      : OUT    std_logic;
    ExpWr         : OUT    std_logic;
    Fail_Out      : OUT    std_logic;
    Flt_CPU_Reset : OUT    std_logic;
    INTA          : OUT    std_logic;
    Status        : OUT    std_logic_vector (3 DOWNTO 0);
    WData         : OUT    std_logic_vector (15 DOWNTO 0)
  );
  END COMPONENT syscon;

  -- Optional embedded configurations
  -- pragma synthesis_off
  FOR ALL : HVPS USE ENTITY PTR3_HVPS_lib.HVPS;
  FOR ALL : syscon USE ENTITY PTR3_HVPS_lib.syscon;
  -- pragma synthesis_on


BEGIN

  -- Instance port mappings.
  U_0 : HVPS
    GENERIC MAP (
      N_CHANNELS => N_CHANNELS,
      BASE_ADDR  => X"0050",
      ADDR_WIDTH => ADDR_WIDTH,
      ChanCfgs   => ChanCfgs
    )
    PORT MAP (
      ExpAddr => ExpAddr,
      ExpRd   => ExpRd,
      ExpWr   => ExpWr,
      clk     => clk,
      rst     => ExpReset,
      wData   => WData,
      ExpAck  => ExpAck(0),
      rData   => rData,
      scl     => hvps_scl,
      sda     => hvps_sda
    );
  U_1 : syscon
    GENERIC MAP (
      DACS_BUILD_NUMBER => X"0002",
      INSTRUMENT_ID     => X"0007",
      N_INTERRUPTS      => N_INTERRUPTS,
      N_BOARDS          => N_BOARDS,
      ADDR_WIDTH        => ADDR_WIDTH,
      INTA_ADDR         => X"0001",
      BDID_ADDR         => X"0002"
    )
    PORT MAP (
      F8M           => clk,
      Ctrl          => subbus_ctrl,
      Addr          => subbus_addr,
      Data_i        => subbus_data_i,
      Data_o        => subbus_data_o,
      Status        => subbus_status,
      ExpRd         => ExpRd,
      ExpWr         => ExpWr,
      WData         => WData,
      RData         => rData,
      ExpAddr       => ExpAddr,
      ExpAck        => ExpAck,
      BdIntr        => BdIntr,
      Collision     => subbus_collision,
      INTA          => OPEN,
      CmdEnbl       => OPEN,
      CmdStrb       => OPEN,
      ExpReset      => ExpReset,
      Fail_In       => subbus_fail_in,
      Fail_Out      => subbus_fail_out,
      Flt_CPU_Reset => Flt_CPU_Reset
    );

END ARCHITECTURE struct;
