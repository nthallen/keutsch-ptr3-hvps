--
-- VHDL Test Bench PTR3_HVPS_lib.dpram_tb.dpram_tester
--
-- Created:
--          by - . (NORT-XPS14)
--          at - 19:00:00 12/31/69
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2013.1b (Build 2)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;


ENTITY dpram_tb IS
   GENERIC (
      MEM_SIZE  : integer := 16;
      WORD_SIZE : integer := 16
   );
END dpram_tb;


LIBRARY PTR3_HVPS_lib;
USE PTR3_HVPS_lib.ALL;


ARCHITECTURE rtl OF dpram_tb IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL RdAddr  : std_logic_vector(15 DOWNTO 0);
   SIGNAL RdEn    : std_logic;
   SIGNAL WrAddr  : std_logic_vector(15 DOWNTO 0);
   SIGNAL WrEn    : std_logic;
   SIGNAL clk     : std_ulogic;
   SIGNAL rst     : std_ulogic;
   SIGNAL wData   : std_logic_vector(WORD_SIZE-1 DOWNTO 0);
   SIGNAL WrRdy   : std_logic;
   SIGNAL rData   : std_logic_vector(WORD_SIZE-1 DOWNTO 0);
   SIGNAL SimDone : std_logic;


   -- Component declarations
   COMPONENT dpram
      GENERIC (
         MEM_SIZE  : integer := 16;
         WORD_SIZE : integer := 16
      );
      PORT (
         RdAddr  : IN     std_logic_vector(15 DOWNTO 0);
         RdEn    : IN     std_logic;
         WrAddr  : IN     std_logic_vector(15 DOWNTO 0);
         WrEn    : IN     std_logic;
         clk     : IN     std_ulogic;
         rst     : IN     std_ulogic;
         wData   : IN     std_logic_vector(WORD_SIZE-1 DOWNTO 0);
         WrRdy   : OUT    std_logic;
         rData   : OUT    std_logic_vector(WORD_SIZE-1 DOWNTO 0)
      );
   END COMPONENT;

   -- embedded configurations
   -- pragma synthesis_off
   FOR U_0 : dpram USE ENTITY PTR3_HVPS_lib.dpram;
   -- pragma synthesis_on

BEGIN

         U_0 : dpram
            GENERIC MAP (
               MEM_SIZE  => MEM_SIZE,
               WORD_SIZE => WORD_SIZE
            )
            PORT MAP (
               RdAddr  => RdAddr,
               RdEn    => RdEn,
               WrAddr  => WrAddr,
               WrEn    => WrEn,
               clk     => clk,
               rst     => rst,
               wData   => wData,
               WrRdy   => WrRdy,
               rData   => rData
            );

  f100m_clk : Process is
  Begin
    clk <= '0';
    -- pragma synthesis_off
    wait for 20 ns;
    while SimDone = '0' loop
      clk <= '1';
      wait for 5 ns;
      clk <= '0';
      wait for 5 ns;
    end loop;
    wait;
    -- pragma synthesis_on
  End Process;
  
  test_proc: PROCESS IS
    procedure process_txn(
      R, W : IN std_logic;
      D : IN std_logic_vector(WORD_SIZE-1 DOWNTO 0)) is
    begin
      RdEn <= R;
      WrEn <= W;
      wData <= D;
      wait until clk'EVENT AND clk = '1';
      return;
    END PROCEDURE process_txn;
  BEGIN
    SimDone <= '0';
    WrEn <= '0';
    RdEn <= '0';
    WrAddr <= (others => '0');
    RdAddr <= (others => '0');
    rst <= '1';
    -- pragma synthesis_off
    wait until clk'Event and clk = '1';
    wait until clk'Event and clk = '1';
    rst <= '0';
    wait until clk'Event and clk = '1';
    process_txn('1', '0', X"0001");
    process_txn('0', '0', X"0002");
    process_txn('0', '1', X"0003");
    process_txn('0', '0', X"0004");
    process_txn('1', '1', X"0005");
    process_txn('0', '0', X"0006");
    process_txn('1', '1', X"0007");
    process_txn('1', '0', X"0008");
    process_txn('0', '0', X"0009");
    process_txn('1', '0', X"000A");
    process_txn('0', '1', X"000B");
    process_txn('1', '1', X"000C");
    process_txn('0', '1', X"000D");
    process_txn('1', '0', X"000E");
    process_txn('0', '0', X"000F");

    SimDone <= '1';
    wait;
    -- pragma synthesis_on
  END PROCESS;

END rtl;