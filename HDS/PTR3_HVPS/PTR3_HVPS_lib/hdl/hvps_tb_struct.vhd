-- VHDL Entity PTR3_HVPS_lib.HVPS_tb.symbol
--
-- Created:
--          by - nort.UNKNOWN (NORT-XPS14)
--          at - 14:39:30 11/28/2017
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2016.1 (Build 8)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;

LIBRARY PTR3_HVPS_lib;
USE PTR3_HVPS_lib.HVPS_cfg.ALL;

ENTITY HVPS_tb IS
  GENERIC( 
    N_CHANNELS : integer := 14;
    WORD_SIZE  : integer := 16;
    ADDR_WIDTH : integer := 8;
    ChanCfgs   : Cfg_t   := ( "000000000", "000000010", "001000100", "010000111", "011001000", "011001011", "100010001", "011011000", "011011011", "100100001", "011101000", "011101011", "100110001", "100111001" )
  );
-- Declarations

END ENTITY HVPS_tb ;

--
-- VHDL Architecture PTR3_HVPS_lib.HVPS_tb.struct
--
-- Created:
--          by - nort.UNKNOWN (NORT-XPS14)
--          at - 14:39:30 11/28/2017
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2016.1 (Build 8)
--

-- Generation properties:
--   Component declarations : yes
--   Configurations         : embedded statements
--                          : add pragmas
--                          : exclude view name
--   
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.numeric_std.ALL;
LIBRARY PTR3_HVPS_lib;
USE PTR3_HVPS_lib.ALL;


ARCHITECTURE struct OF HVPS_tb IS

  -- Architecture declarations

  -- Internal signal declarations
  SIGNAL ExpAck  : std_logic;
  SIGNAL ExpAddr : std_logic_vector(ADDR_WIDTH-1 DOWNTO 0);
  SIGNAL ExpRd   : std_logic;
  SIGNAL ExpWr   : std_logic;
  SIGNAL clk     : std_logic;
  SIGNAL rData   : std_logic_vector(15 DOWNTO 0);
  SIGNAL rst     : std_logic;
  SIGNAL scl     : std_logic;
  SIGNAL sda     : std_logic;
  SIGNAL wData   : std_logic_vector(15 DOWNTO 0);


  -- Component Declarations
  COMPONENT HVPS
  GENERIC (
    N_CHANNELS : integer                       := 14;
    BASE_ADDR  : std_logic_vector(15 DOWNTO 0) := X"0030";
    ADDR_WIDTH : integer                       := 16;
    ChanCfgs   : Cfg_t                         := ( "000000000", "000000010", "001000100", "010000111", "011001000", "011001011", "100010001", "011011000", "011011011", "100100001", "011101000", "011101011", "100110001", "100111001" )
  );
  PORT (
    ExpAddr : IN     std_logic_vector (ADDR_WIDTH-1 DOWNTO 0);
    ExpRd   : IN     std_logic ;
    ExpWr   : IN     std_logic ;
    clk     : IN     std_logic ;
    rst     : IN     std_logic ;
    wData   : IN     std_logic_vector (15 DOWNTO 0);
    ExpAck  : OUT    std_logic ;
    rData   : OUT    std_logic_vector (15 DOWNTO 0);
    scl     : INOUT  std_logic ;
    sda     : INOUT  std_logic 
  );
  END COMPONENT HVPS;
  COMPONENT HVPS_tester
  GENERIC (
    ADDR_WIDTH : integer range 16 DOWNTO 8 := 16
  );
  PORT (
    ExpAck  : IN     std_logic ;
    rData   : IN     std_logic_vector (15 DOWNTO 0);
    ExpAddr : OUT    std_logic_vector (ADDR_WIDTH-1 DOWNTO 0);
    ExpRd   : OUT    std_logic ;
    ExpWr   : OUT    std_logic ;
    clk     : OUT    std_logic ;
    rst     : OUT    std_logic ;
    wData   : OUT    std_logic_vector (15 DOWNTO 0);
    scl     : INOUT  std_logic ;
    sda     : INOUT  std_logic 
  );
  END COMPONENT HVPS_tester;

  -- Optional embedded configurations
  -- pragma synthesis_off
  FOR ALL : HVPS USE ENTITY PTR3_HVPS_lib.HVPS;
  FOR ALL : HVPS_tester USE ENTITY PTR3_HVPS_lib.HVPS_tester;
  -- pragma synthesis_on


BEGIN

  -- Instance port mappings.
  U_0 : HVPS
    GENERIC MAP (
      N_CHANNELS => N_CHANNELS,
      BASE_ADDR  => X"0030",
      ADDR_WIDTH => ADDR_WIDTH,
      ChanCfgs   => ChanCfgs
    )
    PORT MAP (
      ExpAddr => ExpAddr,
      ExpRd   => ExpRd,
      ExpWr   => ExpWr,
      clk     => clk,
      rst     => rst,
      wData   => wData,
      ExpAck  => ExpAck,
      rData   => rData,
      scl     => scl,
      sda     => sda
    );
  U_1 : HVPS_tester
    GENERIC MAP (
      ADDR_WIDTH => ADDR_WIDTH
    )
    PORT MAP (
      ExpAck  => ExpAck,
      rData   => rData,
      ExpAddr => ExpAddr,
      ExpRd   => ExpRd,
      ExpWr   => ExpWr,
      clk     => clk,
      rst     => rst,
      wData   => wData,
      scl     => scl,
      sda     => sda
    );

END ARCHITECTURE struct;
