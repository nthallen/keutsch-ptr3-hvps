-- VHDL Entity PTR3_HVPS_lib.HVPS_txn_tb.symbol
--
-- Created:
--          by - nort.Domain Users (NORT-XPS14)
--          at - 16:44:17 11/09/16
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2013.1b (Build 2)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;



ENTITY HVPS_txn_tb IS
   GENERIC( 
      I2C_CLK_PRESCALE : std_logic_vector (15 DOWNTO 0) := X"000E";
      GOOD_I2C_ADDR    : std_logic_vector (6 DOWNTO 0)  := "1000100";
      BAD_I2C_ADDR     : std_logic_vector (6 DOWNTO 0)  := "1000000"
   );
-- Declarations

END HVPS_txn_tb ;

--
-- VHDL Architecture PTR3_HVPS_lib.HVPS_txn_tb.struct
--
-- Created:
--          by - nort.Domain Users (NORT-XPS14)
--          at - 11:33:07 11/10/16
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2013.1b (Build 2)
--

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.std_logic_arith.ALL;

LIBRARY PTR3_HVPS_lib;

ARCHITECTURE struct OF HVPS_txn_tb IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL Done      : std_logic;
   SIGNAL Err       : std_logic;
   SIGNAL RE        : std_logic;
   SIGNAL Rd        : std_logic;
   SIGNAL Start     : std_logic;
   SIGNAL Stop      : std_logic;
   SIGNAL WE        : std_logic;
   SIGNAL Wr        : std_logic;
   SIGNAL clk       : std_ulogic;
   SIGNAL i2c_rdata : std_logic_vector(7 DOWNTO 0);
   SIGNAL i2c_wdata : std_logic_vector(7 DOWNTO 0);
   SIGNAL rdata     : std_logic_vector(7 DOWNTO 0);
   SIGNAL rst       : std_ulogic;
   SIGNAL scl       : std_logic;
   SIGNAL sda       : std_logic;
   SIGNAL start1    : std_ulogic;
   SIGNAL stop1     : std_ulogic;
   SIGNAL wb_ack_o  : std_logic;
   SIGNAL wb_adr_i  : std_logic_vector(2 DOWNTO 0);
   SIGNAL wb_cyc_i  : std_logic;
   SIGNAL wb_dat_i  : std_logic_vector(7 DOWNTO 0);
   SIGNAL wb_dat_o  : std_logic_vector(7 DOWNTO 0);
   SIGNAL wb_inta_o : std_logic;
   SIGNAL wb_stb_i  : std_logic;
   SIGNAL wb_we_i   : std_logic;
   SIGNAL wdata     : std_ulogic_vector(7 DOWNTO 0);


   -- Component Declarations
   COMPONENT HVPS_I2C
   PORT (
      rst       : IN     std_ulogic ;
      wb_adr_i  : IN     std_logic_vector (2 DOWNTO 0);
      wb_cyc_i  : IN     std_logic ;
      wb_dat_i  : IN     std_logic_vector (7 DOWNTO 0);
      wb_stb_i  : IN     std_logic ;
      wb_we_i   : IN     std_logic ;
      scl       : INOUT  std_logic ;
      sda       : INOUT  std_logic ;
      wb_ack_o  : OUT    std_logic ;
      wb_dat_o  : OUT    std_logic_vector (7 DOWNTO 0);
      wb_inta_o : OUT    std_logic ;
      clk       : IN     std_ulogic 
   );
   END COMPONENT;
   COMPONENT HVPS_txn
   GENERIC (
      I2C_CLK_PRESCALE : std_logic_vector (15 DOWNTO 0) := X"000E"
   );
   PORT (
      clk       : IN     std_ulogic ;
      rst       : IN     std_ulogic ;
      wb_ack_o  : IN     std_logic ;
      wb_adr_i  : OUT    std_logic_vector (2 DOWNTO 0);
      wb_cyc_i  : OUT    std_logic ;
      wb_dat_i  : OUT    std_logic_vector (7 DOWNTO 0);
      wb_dat_o  : IN     std_logic_vector (7 DOWNTO 0);
      wb_inta_o : IN     std_logic ;
      wb_stb_i  : OUT    std_logic ;
      wb_we_i   : OUT    std_logic ;
      i2c_wdata : IN     std_logic_vector (7 DOWNTO 0);
      Wr        : IN     std_logic ;
      Rd        : IN     std_logic ;
      i2c_rdata : OUT    std_logic_vector (7 DOWNTO 0);
      Stop      : IN     std_logic ;
      Done      : OUT    std_logic ;
      Err       : OUT    std_logic ;
      Start     : IN     std_logic 
   );
   END COMPONENT;
   COMPONENT HVPS_txn_tester
   GENERIC (
      GOOD_I2C_ADDR : std_logic_vector (6 DOWNTO 0) := "1000100";
      BAD_I2C_ADDR  : std_logic_vector (6 DOWNTO 0) := "1000000"
   );
   PORT (
      Done      : IN     std_logic ;
      Err       : IN     std_logic ;
      WE        : IN     std_logic ;
      i2c_rdata : IN     std_logic_vector (7 DOWNTO 0);
      start1    : IN     std_ulogic ;
      stop1     : IN     std_ulogic ;
      wdata     : IN     std_ulogic_vector (7 DOWNTO 0);
      Rd        : OUT    std_logic ;
      Start     : OUT    std_logic ;
      Stop      : OUT    std_logic ;
      Wr        : OUT    std_logic ;
      clk       : OUT    std_ulogic ;
      i2c_wdata : OUT    std_logic_vector (7 DOWNTO 0);
      rdata     : OUT    std_logic_vector (7 DOWNTO 0);
      rst       : OUT    std_ulogic ;
      RE        : INOUT  std_logic ;
      scl       : INOUT  std_logic ;
      sda       : INOUT  std_logic 
   );
   END COMPONENT;
   COMPONENT i2c_slave
   GENERIC (
      I2C_ADDR : std_logic_vector(6 DOWNTO 0) := "1000000"
   );
   PORT (
      clk   : IN     std_ulogic ;
      rdata : IN     std_logic_vector (7 DOWNTO 0);
      rst   : IN     std_ulogic ;
      scl   : IN     std_logic ;
      WE    : OUT    std_logic ;
      start : OUT    std_ulogic ;
      stop  : OUT    std_ulogic ;
      wdata : OUT    std_ulogic_vector (7 DOWNTO 0);
      RE    : INOUT  std_logic ;
      sda   : INOUT  std_logic 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : HVPS_I2C USE ENTITY PTR3_HVPS_lib.HVPS_I2C;
   FOR ALL : HVPS_txn USE ENTITY PTR3_HVPS_lib.HVPS_txn;
   FOR ALL : HVPS_txn_tester USE ENTITY PTR3_HVPS_lib.HVPS_txn_tester;
   FOR ALL : i2c_slave USE ENTITY PTR3_HVPS_lib.i2c_slave;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_2 : HVPS_I2C
      PORT MAP (
         rst       => rst,
         wb_adr_i  => wb_adr_i,
         wb_cyc_i  => wb_cyc_i,
         wb_dat_i  => wb_dat_i,
         wb_stb_i  => wb_stb_i,
         wb_we_i   => wb_we_i,
         scl       => scl,
         sda       => sda,
         wb_ack_o  => wb_ack_o,
         wb_dat_o  => wb_dat_o,
         wb_inta_o => wb_inta_o,
         clk       => clk
      );
   U_0 : HVPS_txn
      GENERIC MAP (
         I2C_CLK_PRESCALE => X"00C7"
      )
      PORT MAP (
         clk       => clk,
         rst       => rst,
         wb_ack_o  => wb_ack_o,
         wb_adr_i  => wb_adr_i,
         wb_cyc_i  => wb_cyc_i,
         wb_dat_i  => wb_dat_i,
         wb_dat_o  => wb_dat_o,
         wb_inta_o => wb_inta_o,
         wb_stb_i  => wb_stb_i,
         wb_we_i   => wb_we_i,
         i2c_wdata => i2c_wdata,
         Wr        => Wr,
         Rd        => Rd,
         i2c_rdata => i2c_rdata,
         Stop      => Stop,
         Done      => Done,
         Err       => Err,
         Start     => Start
      );
   U_1 : HVPS_txn_tester
      GENERIC MAP (
         GOOD_I2C_ADDR => GOOD_I2C_ADDR,
         BAD_I2C_ADDR  => BAD_I2C_ADDR
      )
      PORT MAP (
         Done      => Done,
         Err       => Err,
         WE        => WE,
         i2c_rdata => i2c_rdata,
         start1    => start1,
         stop1     => stop1,
         wdata     => wdata,
         Rd        => Rd,
         Start     => Start,
         Stop      => Stop,
         Wr        => Wr,
         clk       => clk,
         i2c_wdata => i2c_wdata,
         rdata     => rdata,
         rst       => rst,
         RE        => RE,
         scl       => scl,
         sda       => sda
      );
   U_3 : i2c_slave
      GENERIC MAP (
         I2C_ADDR => GOOD_I2C_ADDR
      )
      PORT MAP (
         clk   => clk,
         rdata => rdata,
         rst   => rst,
         scl   => scl,
         WE    => WE,
         start => start1,
         stop  => stop1,
         wdata => wdata,
         RE    => RE,
         sda   => sda
      );

END struct;
